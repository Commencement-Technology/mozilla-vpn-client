/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

// This module either loads the Qt-Provided bindings, present in qtAndroid dir
// or replaces them with it's basic android counter part form moc/ , so dev's can enjoy
// code completeion and such in their favorite ide

dependencies {
    // This will be populated by importQtJar
    implementation fileTree(dir: 'build/qt_jar', include: ['*.jar', '*.aar'])
}
ext{
    // Todo: move all of that selector logic into BuildSRC
    // They are totally interchangeable
    if(new File(mozillavpn_qt_android_dir+"/android_arm64_v8a").exists()){
        qtAndroidDir = mozillavpn_qt_android_dir+"/android_arm64_v8a"
    }
    else if(new File(mozillavpn_qt_android_dir+"/android_armeabi_v7a").exists()){
        qtAndroidDir = mozillavpn_qt_android_dir+"/android_armeabi_v7a"
    }
    else if(new File(mozillavpn_qt_android_dir+"/android_x86").exists()){
        qtAndroidDir = mozillavpn_qt_android_dir+"/android_x86"
    }
    else if(new File(mozillavpn_qt_android_dir+"/android_x86_64").exists()){
        qtAndroidDir = mozillavpn_qt_android_dir+"/android_x86_64"
    }
    else{
        throw new Exception("NOOOO")
    }
}

android {
    compileSdkVersion Config.compileSdkVersion
    defaultConfig {
        minSdkVersion Config.minSdkVersion
    }
    sourceSets {
        println(qtAndroidDir)
        main {
            java.srcDirs = [qtAndroidDir + '/src/android/java/src/org/qtproject/qt/android/bindings/']
            aidl.srcDirs = [qtAndroidDir + '/src/android/java/src/org/qtproject/qt/android/bindings/']
            manifest.srcFile 'AndroidManifest.xml'
            jniLibs.srcDirs = ['qt_plugins']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

task importQtJar(type: Copy) {
    from(qtAndroidDir+'/jar') {
        include '*.jar'
    }
    into 'build/qt_jar'
}
preBuild.dependsOn importQtJar


// Tasks to Import the Platform plugins
task importQtPluginsArm64(type: Copy) {
    from(mozillavpn_qt_android_dir+"/android_arm64_v8a/plugins/platforms") {
        include '*.so'
    }
    into 'qt_plugins/arm64-v8a'
    onlyIf {
        (new File(mozillavpn_qt_android_dir+"/android_arm64_v8a")).exists()
    }
}
preBuild.dependsOn importQtPluginsArm64

