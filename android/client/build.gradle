/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}
apply plugin: QtConfig

dependencies {
    // implementation project(path: ':openssl')
    implementation fileTree(dir: QtConfiguration.anyAndroid+"/jar", include: ['*.jar', '*.aar'])
}


android {
    ndkVersion '24.0.8215888'
    compileSdkVersion Config.compileSdkVersion
    defaultConfig {
        minSdkVersion Config.minSdkVersion
    }

    sourceSets {
        main {
            java.srcDirs = [QtConfiguration.bindingsFolder]
            aidl.srcDirs = [QtConfiguration.bindingsFolder]
            manifest.srcFile 'AndroidManifest.xml'
            jniLibs.srcDirs = [
                    'build/qt_plugins',
                    'build/qml_plugins',
                    'build/ssl',
            ]
            res.srcDirs =  [
                    "res"
            ]
        }
    }

    externalNativeBuild {
        cmake {
            version "3.18.1"
            path '../../CMakeLists.txt'
        }
    }
    defaultConfig {
        externalNativeBuild {
            cmake {
                abiFilters QtConfiguration.abis.split(",") // We can't pass lists, so lets split it here :)
                // Passes optional arguments to CMake.
                arguments "-DANDROID_QT_DIR=${QtConfiguration.qtAndroidRootDir}",
                          "-DQT_HOST_PATH=${QtConfiguration.host}",
                          "-DQT_HOST_PATH_CMAKE_DIR=${QtConfiguration.host}/lib/cmake",
                          "-DANDROID_STL=c++_shared",
                          "--target mozillavpn"
            }
        }
    }

}

// Tasks to Import the Platform plugins
task importQtPlatformPlugins(type: Copy) {
    with QtConfiguration.importQtPlugin("tls")
    with QtConfiguration.importQtPlugin("platforms")
    with QtConfiguration.importQtPlugin("imageformats")

    into("build/qt_plugins")
}
preBuild.dependsOn importQtPlatformPlugins

// Tasks to Import the QML plugins
task importQMLPlugins(type: Copy) {
    onlyIf {
        // Qml import scanning is quite a bit of i/o, while the output rearly changes.
        // so once we have done this, don't do it again until the cache is cleared
        !(new File("build/qml_plugins")).exists()
    }
    with QtConfiguration.copyQMLPlugin()
    with QtConfiguration.copyQMLCompat()
    into("build/qml_plugins")
}
preBuild.dependsOn importQMLPlugins


// Tasks to Import the Platform plugins
task importOpenSSL(type: Copy) {
    with(copySpec(){
        from("../../3rdparty/openSSL/latest/arm")
        into("armeabi-v7a")
    })
    with(copySpec(){
        from("../../3rdparty/openSSL/latest/arm64")
        into("arm64-v8a")
    })
    with(copySpec(){
        from("../../3rdparty/openSSL/latest/x86")
        into("x86")
    })
    with(copySpec(){
        from("../../3rdparty/openSSL/latest/x86_64")
        into("x86_64")
    })
    into("build/ssl")
}
preBuild.dependsOn importOpenSSL

tasks.whenTaskAdded {
    theTask ->
        if (theTask.name.contains('externalNativeBuild')) {
            theTask.doLast{
                println "[*] begin to copy file."
            }
        }
        println theTask.name
}