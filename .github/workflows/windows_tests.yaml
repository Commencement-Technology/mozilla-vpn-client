name: Windows Tests
on:
  push:
    branches:
      - main
      - "releases/**"
  pull_request:
    branches:
      - main
      - "releases/**"

# Restrict tests to the most recent commit.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_test_app:
    name: Build Test Client
    runs-on: windows-latest
    outputs:
      matrix: ${{ steps.testGen.outputs.tests }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Install build dependencies
        shell: bash
        run: |
          pip3 install -r requirements.txt

      - name: Add msvc dev commands to PATH
        uses: ilammy/msvc-dev-cmd@v1

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Install Qt6
        shell: bash
        run: |
          curl -L https://firefox-ci-tc.services.mozilla.com/api/index/v1/task/mozillavpn.v2.mozillavpn.cache.level-3.toolchains.v3.qt-win.latest/artifacts/public%2Fbuild%2Fqt6_win.zip -o qt6_win.zip
          unzip -q -d 3rdparty qt6_win.zip

      - name: Compile test client
        shell: cmd
        run: |
          mkdir  build\cmake
          cmake -S . -B build\cmake -GNinja -DCMAKE_BUILD_TYPE=Debug ^
            -DCMAKE_PREFIX_PATH="${{ github.workspace }}\3rdparty\QT_OUT\lib\cmake"
          cmake --build build\cmake --target dummyvpn

          mkdir build\addons
          copy build\cmake\tests\dummyvpn\dummyvpn.exe build
          xcopy /e build\cmake\tests\dummyvpn\addons build\addons

      - uses: actions/upload-artifact@v3
        with:
          name: test-client-${{ github.sha }}
          path: |
            build/
            !build/cmake/

      - name: Generate tasklist
        id: testGen
        shell: bash
        run: |
          echo -n "tests=" >> $GITHUB_OUTPUT
          for test in $(find tests/functional -name 'test*.js' | sort); do
            printf '{"name": "%s", "path": "%s"}' $(basename ${test%.js} | sed -n 's/test//p') $test
          done | jq -s -c >> $GITHUB_OUTPUT

  functionaltests:
    name: Functional tests
    needs:
      - build_test_app
    runs-on: windows-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false # Don't cancel other jobs if a test fails
      matrix:
        test: ${{ fromJson(needs.build_test_app.outputs.matrix) }}
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: test-client-${{ github.sha }}
          path: build/

      - name: Install test dependecies
        run: |
          npm install

      - name: Check build
        run: |
          ./build/dummyvpn.exe -v

      - name: Running ${{ matrix.test.name }} Tests
        id: runTests
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            export PATH=$GECKOWEBDRIVER:$(npm bin):$PATH
            export HEADLESS=yes
            export TZ=Europe/London
            mkdir -p $ARTIFACT_DIR
            npm run functionalTest --  --retries 3 ${{ matrix.test.path }}
        env:
          ARTIFACT_DIR: ${{ runner.temp }}/artifacts
          MVPN_BIN: ./build/dummyvpn.exe

      - name: Uploading artifacts
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: ${{ matrix.test.name }} Logs
          path: ${{ runner.temp }}/artifacts
