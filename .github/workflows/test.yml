name: Tests
on:
  push:
    branches:
      - main
      - 'releases/**'
  pull_request:
    branches:
      - main
      - 'releases/**'

# Restrict tests to the most recent commit.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # Cancel Tests if there is a new commit

jobs:
  get-dc-task: 
    name: Get DecisionTask
    runs-on: ubuntu-22.04
    outputs:
      taskID: ${{ steps.getDecisionTask.outputs.taskID }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Get Decision Task
        id: getDecisionTask
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run : |
          while (1){
            $(gh pr checks).Split([Environment]::NewLine) | ForEach-Object{ 
                if($_.contains("Decision Task (pull-request)")){
                    if($_.contains("pass")){
                        $url = $_.Split([char]9)[-1]
                        $task_ID += $url.Replace("https://firefox-ci-tc.services.mozilla.com/tasks/","")
                        Write-Output $task_ID
                        Write-Output "taskID=$task_ID" | Out-File -FilePath $env:GITHUB_OUTPUT
                        break;
                    }
                }
                
            }
            Write-Output "Decision Task not found, sleeping 1s"
            Start-Sleep -Seconds 1 
          }
  
  unit-tests:
    name: ${{matrix.os}} Unit tests
    strategy:
        fail-fast: false # Don't cancel other jobs if a test fails
        matrix:
          os: [ubuntu-22.04,macos-latest,windows-latest]
    runs-on: ${{matrix.os}}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Linux Install deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y $(./scripts/linux/getdeps.py -a linux/debian/control)
          pip3 install -r requirements.txt
      - name: MacOS Install dependencies
        if: runner.os == 'macOS'
        shell: bash
        run: |          
          pip3 install -r requirements.txt
          wget https://firefox-ci-tc.services.mozilla.com/api/index/v1/task/mozillavpn.v2.mozillavpn.cache.level-3.toolchains.v3.qt-mac.latest/artifacts/public%2Fbuild%2Fqt6_mac.zip -O $RUNNER_TEMP/mac.zip
          cd $RUNNER_TEMP
          unzip -a mac.zip
          rm mac.zip
          # Export that for the Build Task
          echo "CMAKE_PREFIX_PATH=$RUNNER_TEMP/qt_dist/lib/cmake" >> "$GITHUB_ENV"
      - name: Windows Install dependencies
        if: runner.os == 'windows'
        shell: bash
        run: |          
          pip3 install -r requirements.txt
          cd $RUNNER_TEMP
          curl -L https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/VS7S5JtSRyyu4D6jqoGShw/runs/0/artifacts/public%2Fbuild%2Fqt6_win.zip > windows.zip
          unzip -a windows.zip
          rm windows.zip
          # Export that for the Build Task
          echo "CMAKE_PREFIX_PATH=$RUNNER_TEMP/QT_OUT/lib/cmake" >> "$GITHUB_ENV"
          # We're using msvc, so let's enable multiprocess
          echo "CXXFLAGS=/MP" >> "$GITHUB_ENV"
      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with: 
          key: ${{matrix.os}}
          #max-size: "300M"
          variant: ccache
      - name: Enable CCache
        shell: bash
        run: |
          echo "CMAKE_CXX_COMPILER_LAUNCHER=ccache" >> "$GITHUB_ENV"
          echo "CMAKE_C_COMPILER_LAUNCHER=ccache" >> "$GITHUB_ENV"
          echo "CCACHE_COMPRESSLEVEL=19" >> "$GITHUB_ENV"
          echo "CCACHE_NOHASHDIR=true" >> "$GITHUB_ENV"
          
      - name: Install Grcov
        shell: bash
        run: |
          cargo install grcov --root ${{github.workspace}}/grcov-build --version 0.8.13
      - name: Building tests
        shell: bash
        run: |
          echo "Using QT: $CMAKE_PREFIX_PATH"
          mkdir -p build
          cmake -S . -B $(pwd)/build \
            -DCMAKE_CXX_FLAGS=--coverage \
            -DCMAKE_EXE_LINKER_FLAGS=--coverage
          cmake --build $(pwd)/build --target build_tests -j$(nproc)
      - name: Running tests
        shell: bash
        working-directory: ./build
        run: |
          export PATH={{github.workspace}}/qt_dist/bin:${{github.workspace}}/grcov-build/bin:$PATH
          ctest --output-on-failure

          grcov $(pwd)/tests/nativemessaging/CMakeFiles/nativemessaging_tests.dir -s ${{github.workspace}} \
              -t lcov --branch --ignore-not-existing > ${{github.workspace}}/nativemessaging_lcov.info

          grcov $(pwd)/tests/qml/CMakeFiles/qml_tests.dir -s ${{github.workspace}} \
              -t lcov --branch --ignore-not-existing > ${{github.workspace}}/qml_lcov.info

          grcov $(pwd)/tests/unit/CMakeFiles/unit_tests.dir -s ${{github.workspace}} \
              -t lcov --branch --ignore-not-existing > ${{github.workspace}}/unit_lcov.info

          grcov $(pwd)/src/apps/auth_tests/CMakeFiles/app_auth_tests.dir -s ${{github.workspace}} \
              -t lcov --branch --ignore-not-existing > ${{github.workspace}}/auth_lcov.info

          grcov $(pwd)/src/apps/unit_tests/CMakeFiles/app_unit_tests.dir -s ${{github.workspace}} \
              -t lcov --branch --ignore-not-existing > ${{github.workspace}}/unitapp_lcov.info
      - name: Upload coverage for ${{matrix.os}} unit tests to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: .
          flags: ${{matrix.os}}_unit_tests
          name: codecov-poc
          files: auth_lcov.info,nativemessaging_lcov.info,qml_lcov.info,unit_lcov.info,unitapp_lcov.info
          verbose: true

  wasm-build-dummy-client:
    name: Build Wasm Dummy Client
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.testGen.outputs.tests }}
    env:
      QTVERSION: 6.2.4

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
            submodules: 'true'

      - name: Install Qt
        shell: bash
        run: |
          python3 -m pip install aqtinstall
          # qt6.2.3 for wasm needs the desktop linux installation
          python3 -m aqt install-qt -O /opt linux desktop $QTVERSION
          python3 -m aqt install-qt -O /opt linux desktop $QTVERSION wasm_32 -m qtcharts qtwebsockets qt5compat

      - name: Install python dependencies
        shell: bash
        run: |
          pip install -r requirements.txt

      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v7

      - name: Compiling
        shell: bash
        run: |
          export PATH=/opt/$QTVERSION/wasm_32/bin:/opt/$QTVERSION/gcc_64/bin:$PATH
          mkdir build
          /opt/$QTVERSION/wasm_32/bin/qt-cmake -S . -B build -DQT_HOST_PATH=/opt/$QTVERSION/gcc_64 -DQT_HOST_PATH_CMAKE_DIR=/opt/$QTVERSION/gcc_64/lib/cmake -DCMAKE_BUILD_TYPE=Release
          cmake --build build -j4

      - name: Generate tasklist
        id: testGen
        shell: bash
        run: |
          echo -n "tests=" >> $GITHUB_OUTPUT
          for test in $(find tests/functional -name 'test*.js' | sort); do
            printf '{"name": "%s", "path": "%s"}' $(basename ${test%.js} | sed -n 's/test//p') $test
          done | jq -s -c >> $GITHUB_OUTPUT

      - name: Check tests
        shell: bash
        env:
          TEST_LIST: ${{ steps.testGen.outputs.tests }}
        run: |
          echo $TEST_LIST | jq

      - name: Uploading
        uses: actions/upload-artifact@v3
        with:
            name: WebAssembly Build Qt6
            path: build/wasm_build

  wasm-functional-tests:
    name: Functional tests
    needs:
      - wasm-build-dummy-client
    runs-on: ubuntu-20.04
    timeout-minutes: 45
    strategy:
      fail-fast: false # Don't cancel other jobs if a test fails
      matrix:
        test: ${{ fromJson(needs.wasm-build-dummy-client.outputs.matrix) }}
    env:
      QTVERSION: 6.2.4

    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install Qt
        shell: bash
        run: |
          python3 -m pip install aqtinstall
          python3 -m aqt install-qt -O /opt linux desktop $QTVERSION

      - name: Install dependecies
        run: |
          sudo apt install --no-upgrade firefox xvfb -y
          pip3 install -r requirements.txt
          npm install

      - name: Download a Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: WebAssembly Build Qt6
          # Destination path, WASM_BUILD_DIRECTORY
          path: wasm_build

      - name: Build addons
        shell: bash
        run: ./scripts/addon/generate_all_tests.py -q /opt/$QTVERSION/gcc_64/bin

      - name: Running ${{matrix.test.name}} Tests
        id: runTests
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            export PATH=$GECKOWEBDRIVER:$(npm bin):$PATH
            export HEADLESS=yes
            export WASM_BUILD_DIRECTORY=$(pwd)/wasm_build
            xvfb-run -a npm run functionalTestWasm --  --retries 3 ${{matrix.test.path}}

  linux-build-dummy-client:
    name: Build Linux Dummy Client
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.testGen.outputs.tests }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Install build dependecies
        run: |
          sudo apt-get update
          sudo apt-get install -y $(./scripts/linux/getdeps.py -a linux/debian/control)

      - name: Install Grcov
        shell: bash
        run: |
          cargo install grcov --root ${{github.workspace}}/grcov-build --version 0.8.13

      - name: Compile test client
        shell: bash
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          pip3 install -r requirements.txt

          mkdir -p build/cmake
          mkdir -p build/profile
          cmake -S $(pwd) -B build/cmake \
              -DCMAKE_CXX_FLAGS="--coverage -fprofile-generate=$(pwd)/build/profile" \
              -DCMAKE_EXE_LINKER_FLAGS="--coverage -fprofile-generate=$(pwd)/build/profile"
          cmake --build build/cmake -j$(nproc) --target dummyvpn

          mkdir -p build/profile
          rsync -a --include '*/' --include '*.gcno' --exclude '*' \
              build/cmake/tests/dummyvpn/CMakeFiles/dummyvpn.dir/ build/profile/
          cp ./build/cmake/tests/dummyvpn/dummyvpn build/

      - name: Compile test addons
        shell: bash
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          mkdir -p build/addons
          cmake -S $(pwd)/tests/functional/addons -B build/addons
          cmake --build build/addons

      - uses: actions/upload-artifact@v3
        with:
          name: test-client-${{ github.sha }}
          path: |
            build/
            !build/cmake/

      - name: Generate tasklist
        id: testGen
        shell: bash
        run: |
          echo -n "tests=" >> $GITHUB_OUTPUT
          for test in $(find tests/functional -name 'test*.js' | sort); do
            printf '{"name": "%s", "path": "%s"}' $(basename ${test%.js} | sed -n 's/test//p') $test
          done | jq -s -c >> $GITHUB_OUTPUT

      - name: Check tests
        shell: bash
        env:
          TEST_LIST: ${{ steps.testGen.outputs.tests }}
        run: |
          echo $TEST_LIST | jq

  linux-functional-tests:
    name: Functional tests
    needs:
      - linux-build-dummy-client
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    strategy:
      fail-fast: false # Don't cancel other jobs if a test fails
      matrix:
        test: ${{ fromJson(needs.linux-build-dummy-client.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: test-client-${{ github.sha }}
          path: build/

      - name: Install test dependecies
        run: |
          sudo apt-get update
          sudo apt-get install -y $(./scripts/linux/getdeps.py -r linux/debian/control)
          sudo apt install --no-upgrade firefox xvfb -y
          pip3 install -r requirements.txt
          npm install
      - name: Install Grcov
        shell: bash
        run: |
          cargo install grcov --root ${{github.workspace}}/grcov-build --version 0.8.13

      - name: Check build
        shell: bash
        run: |
            chmod +x ./build/dummyvpn
            ./build/dummyvpn -v

            chmod +x ${{github.workspace}}/grcov-build/bin/grcov
            ${{github.workspace}}/grcov-build/bin/grcov --version

      - name: Running ${{matrix.test.name}} Tests
        id: runTests
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            export PATH=$GECKOWEBDRIVER:$(npm bin):$PATH
            export HEADLESS=yes
            export TZ=Europe/London
            mkdir -p $ARTIFACT_DIR
            xvfb-run -a npm run functionalTest --  --retries 3 ${{matrix.test.path}}
        env:
          ARTIFACT_DIR: ${{ runner.temp }}/artifacts
          MVPN_BIN: ./build/dummyvpn
          MVPN_ADDONS_PATH: ./build/addons

      - name: Generating grcov reports
        id: generateGrcov
        continue-on-error: true # Ignore GRCOV parsing errors, see github.com/mozilla/grcov/issues/570
        timeout-minutes: 1 # Give GRCOV a short timeout in case it hangs after a panic
        run: |
          export PATH=${{github.workspace}}/grcov-build/bin:$PATH
          grcov build/profile \
              -s src -t lcov --branch --ignore-not-existing \
              -o ${{runner.temp}}/artifacts/functional_lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: steps.generateGrcov.outcome == 'success'
        with:
          directory: .
          flags: functional_tests
          name: codecov-poc
          files: ${{runner.temp}}/artifacts/functional_lcov.info
          verbose: true

      - name: Uploading artifacts
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: ${{matrix.test.name}} Logs
          path: ${{ runner.temp }}/artifacts
